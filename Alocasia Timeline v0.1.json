{
    "$schema": "https://vega.github.io/schema/vega/v5.json",
    "description": "a serpentine timeline. The serpentine shape can be an option for instances where an oblong canvas is not ideal. The shape can be customized using many of the signals below. Input bindings have been included for demonstration purposes",
    "background": "white",
    "padding": 15,
    "width": 950,
    "signals": [
      {
        "name": "width",
        "init": "width",
        "bindDisabled": {
          "name": "straight width",
          "input": "range",
          "min": 0,
          "max": 2000,
          "step": 1
        },
        "on": [
          {"events": [{"signal": "annotations"}], "update": "width+1"},
          {"events": [{"signal": "annotations"}], "update": "width-1"},
          {"events": [{"signal": "mO"}], "update": "width+1"},
          {"events": [{"signal": "mO"}], "update": "width-1"},
          {"events": [{"signal": "tLO"}], "update": "width+1"},
          {"events": [{"signal": "tLO"}], "update": "width-1"},
          {"events": [{"signal": "sN"}], "update": "width+1"},
          {"events": [{"signal": "sN"}], "update": "width-1"},
          {"events": [{"signal": "mO"}], "update": "height+1"},
          {"events": [{"signal": "mO"}], "update": "height-1"},
          {"events": [{"signal": "tLO"}], "update": "height+1"},
          {"events": [{"signal": "tLO"}], "update": "height-1"}
        ]
      },
      {
        "name": "sH",
        "description": "serpentine: diameter of arcs",
        "value": 125,
        "bindDisabled": {
          "name": "arc diameter",
          "input": "range",
          "min": 25,
          "max": 400,
          "step": 1
        }
      },
      {
        "name": "labelsOnHover",
        "description": "milestone: show labels on hover only",
        "value": true,
        "bindDisabled": {"name": "hover labels", "input": "checkbox"}
      },
      {
        "name": "sN",
        "description": "serpentine: number of arcs",
        "value": 4,
        "bindDisabled": {
          "name": "# of arcs",
          "input": "range",
          "min": 0,
          "max": 20,
          "step": 1
        }
      },
      {
        "name": "tC",
        "description": "ticks: number of axis ticks to display on the timeline",
        "value": 50,
        "bindDisabled": {
          "name": "tick count",
          "input": "range",
          "min": 0,
          "max": 100,
          "step": 1
        }
      },
      {
        "name": "tLO",
        "description": "ticks: the offset for the tick labels",
        "value": 8
      },
      {
        "name": "mO",
        "description": "milestone: the offset for the milestone markers",
        "value": 60,
        "bindDisabled": {
          "name": "milestone offset",
          "input": "range",
          "min": 0,
          "max": 70,
          "step": 0.5
        }
      },
      {
        "name": "sR0P",
        "description": "serpentine: percentage of width of canvas for the start of the timeline",
        "value": 0,
        "bindDisabled": {
          "name": "timeline x0 %",
          "input": "range",
          "min": 0,
          "max": 1,
          "step": 0.01
        }
      },
      {
        "name": "sLP",
        "description": "serpentine: percentage of total length of canvas for the end of the timeline",
        "value": 1,
        "bindDisabled": {
          "name": "timeline len %",
          "input": "range",
          "min": 0,
          "max": 1,
          "step": 0.01
        }
      },
      {
        "name": "annotationStart",
        "value": "",
        "bindDisabled": {"name": "start annotation", "input": "text"}
      },
      {
        "name": "annotationEnd",
        "value": "Today",
        "bindDisabled": {"name": "end annotation", "input": "text"}
      },
      {
        "name": "includeArrows",
        "value": true,
        "bindDisabled": {"name": "include arrows", "input": "checkbox"}
      },
      {
        "name": "sT",
        "description": "serpentine: thicknes of the line",
        "value": 5,
        "bindDisabled": {
          "name": "line thickness",
          "input": "range",
          "min": 1,
          "max": 10,
          "step": 0.5
        }
      },
      {
        "name": "domain",
        "init": "[1839, year(now())]",
        "description": "serpentine: manually set the domain extent for the timeline, otherwise set to null to have the domain calculated for you"
      },
      {
        "name": "sRange",
        "description": "serpentine: range for the serpentine scale",
        "update": "[sR0P*width,sL*sLP]"
      },
      {
        "name": "annotations",
        "description": "serpentine: annotations that appear at the start and end of the timeline",
        "update": "{start: (isValid(annotationStart) ? annotationStart : ''), end: (isValid(annotationEnd) ? annotationEnd : '')}"
      },
      {
        "name": "sD",
        "update": "[2, 2]",
        "description": "serpentine: dash array for the serpentine line"
      },
      {
        "name": "reverse",
        "description": "serpentine: boolean to indicate whether the scale for the timeline should be reversed",
        "value": false
      },
      {
        "name": "sPct",
        "description": "serpentine: percentage of width for the straight portions of the timeline",
        "value": 1,
        "update": "sPct < 0.25 ? 0 : sPct < 0.75 ? 0.5 : 1"
      },
      {
        "name": "sW",
        "description": "serpentine: horizontal length of straight segments",
        "update": "sPct*width"
      },
      {
        "name": "sL",
        "description": "serpentine: total length of line",
        "update": "(sN+1)*sW+(sN)*sH*PI/2"
      },
      {
        "name": "sA",
        "description": "serpentine: length of an arc segment",
        "update": "(sH*PI/2)"
      },
      {
        "name": "sWsA",
        "description": "serpentine: length of a line + arc segment",
        "update": "(sW + sH*PI/2)"
      },
      {
        "name": "sDomain",
        "description": "serpentine: domain for the serpentine scale",
        "init": "domain ? domain : [+extent(pluck(data('dataset'), 'domain'))[0], +extent(pluck(data('dataset'), 'domain'))[1]]"
      },
      {
  "name": "hoverFocus",
  "value": null,
  "on": [
    {
      "events": "mouseover",
      "update": "isValid(datum) && isValid(datum['domain']) ? {domain: datum['domain'], label: datum['label']} : null"
    },
    {
      "events": "mouseout",
      "update": "null"
    },
    {
      "events": "blur",
      "update": "null"
    }
  ]
}
,
      {
        "name": "height",
        "description": "calculated height",
        "update": "extent(pluck(data('serpentine'), 'y'))[1]"
      }
    ],
    "scales": [
      {
        "name": "sS1",
        "type": "linear",
        "zero": false,
        "reverse": {"signal": "reverse"},
        "domain": {"signal": "sDomain"},
        "range": {"signal": "sRange"}
      },
      {
        "name": "footerY",
        "type": "band",
        "domain": {"data": "footer", "field": "id"},
        "range": [
          {"signal": "height+60"},
          {"signal": "height+60+length(data('footer'))*11"}
        ]
      }
    ],
    "marks": [
      {
        "name": "axis_group",
        "description": "group containing all the axis marks - annotations, domain, arrow indicators, tick lines, tick labels on straightaways, tick labels on arcs",
        "type": "group",
        "marks": [
          {
            "name": "annotations",
            "description": "Text marks that appear at the start and end of the timeline. Configured using the 'annotations' signal",
            "from": {"data": "domain_extent"},
            "on": [{"trigger": "annotations", "modify": "annotations"}],
            "type": "text",
            "interactive": false,
            "encode": {
              "update": {
                "x": {"field": "x"},
                "y": {"field": "y"},
                "text": {
                  "signal": "datum['category'] === 'start' ? annotations['start'] : annotations['end']"
                },
                "fontSize": {"value": 10},
                "baseline": {"value": "middle"},
                "align": {"field": "align"},
                "angle": {"field": "angle"},
                "dx": {"field": "dx"},
                "dy": {"signal": "1"},
                "fill": {"value": "gray"}
              }
            }
          },
          {
            "name": "serpentine_line",
            "description": "The serpentine-shaped line that acts as the axis domain line",
            "type": "line",
            "from": {"data": "serpentine"},
            "interactive": false,
            "encode": {
              "update": {
                "x": {"field": "x"},
                "y": {"field": "y"},
                "strokeDash": {"signal": "sD"},
                "stroke": {"value": "#888"},
                "strokeWidth": {"signal": "sT"}
              }
            }
          },
          {
            "name": "arrow_marks",
            "description": "The arrows to indicate direction that appear at the beginning and end of each arc+straightaway combonation",
            "type": "text",
            "from": {"data": "segment_ends"},
            "interactive": false,
            "encode": {
              "update": {
                "x": {"field": "x"},
                "y": {"field": "y"},
                "dy": {"value": 1},
                "text": {"value": "➤"},
                "fontSize": {"signal": "18"},
                "fill": {"value": "#000"},
                "stroke": {"value": "#fff"},
                "strokeWidth": {"value": 1},
                "angle": {"signal": "datum['direction'] === '→' ? 0 : 180"},
                "align": {"value": "center"},
                "baseline": {"value": "middle"}
              }
            }
          },
          {
            "name": "tick_marks",
            "description": "The line (text mark) designated to each tick",
            "from": {"data": "ticks"},
            "type": "text",
            "interactive": false,
            "encode": {
              "update": {
                "x": {"field": "x"},
                "y": {"field": "y"},
                "dy": {
                  "signal": "2.5*( datum['type'] === 'straight' ? 1 : datum['side'] === 'right' ? (round(datum['alpha']*(180/PI)) >= 90 ? -1 : 4) : (round(datum['alpha']*(180/PI)) > 89 ? -1 : 4))"
                },
                "text": {"signal": "'|'"},
                "fontSize": {"signal": "7"},
                "fill": {"value": "#000"},
                "angle": {"field": "labelAngle"},
                "align": {"value": "center"},
                "baseline": {
                  "signal": "datum['type'] === 'straight' ? 'top' : 'bottom'"
                }
              }
            }
          },
          {
            "name": "tick_labels_straight",
            "description": "The straightaway tick labels",
            "from": {"data": "ticks"},
            "type": "text",
            "interactive": false,
            "encode": {
              "update": {
                "x": {"field": "x"},
                "y": {"field": "y"},
                "dy": {"field": "dy"},
                "text": {"field": "domain"},
                "fontSize": {"signal": "10"},
                "fill": {"value": "#000"},
                "align": {"value": "center"},
                "angle": {"field": "labelAngle"},
                "baseline": {"signal": "datum['type'] === 'straight' ? 'top' : 'bottom'"}
              }
            }
          }
        ]
      },
      {
        "name": "milestone_connecting_lines",
        "description": "The milestone lines that connect the markers to labels",
        "from": {"data": "milestones"},
        "type": "text",
        "interactive": false,
        "encode": {
          "update": {
            "text": {"signal": "'|'"},
            "x": {"field": "x"},
            "y": {"field": "y"},
            "fontSize": {"value": 15},
            "fontWeight": {"value": 100},
            "dy": {
              "signal": "datum['type'] === 'arc' && (round(datum['alpha']*(180/PI)) > 89) ? 0.35 * (mO+3.5) : datum['dy']/2"
            },
            "align": {"value": "center"},
            "baseline": {"value": "middle"},
            "angle": {"field": "labelAngle"},
            "fillOpacity": {"value": 0},
            "opacity": {
              "signal": "isValid(hoverFocus) && datum['label'] === hoverFocus['label'] ? 1 : labelsOnHover ? 0 : 1"
            }
          }
        }
      },
     {
  "name": "milestone_markers",
  "type": "symbol",
  "from": {"data": "milestones"},
  "encode": {
    "update": {
      "x": {"field": "x"},
      "y": {"field": "y"},
      "size": {
        "signal": "labelsOnHover && isValid(hoverFocus) && datum['label'] === hoverFocus['label'] ? (10 + 100 * datum['eventCount']) : (10 + 100 * datum['eventCount'])"
      },

      "fill": {
        "signal": "labelsOnHover ? isValid(hoverFocus) && datum['label'] === hoverFocus['label'] ? 'firebrick' : '#38383B' : 'firebrick'"
      },
      "stroke": {
        "signal": "labelsOnHover ? isValid(hoverFocus) && datum['label'] === hoverFocus['label'] ? '#fff' : 'firebrick' : '#fff'"
      },
      "strokeWidth": {"signal": "labelsOnHover ? 1 : 20"},
      "cursor": {"signal": "labelsOnHover ? 'pointer' : 'default'"}
    }
  }
}

,
      {
  "name": "milestone_label_backgrounds",
  "description": "The white backgrounds for milestone labels",
  "from": {"data": "milestones"},
  "type": "text",
  "interactive": false,
  "aria": false,
  "focus": false,
  "encode": {
    "update": {
      "x": {"field": "x"},
      "y": {"field": "y"},
      "dy": {"field": "dy"},
      "text": {"signal": "datum['domain'] + ' - ' + datum['label']"},
      "lineBreak": {"value": ", "},
      "fontSize": {"signal": "10"},
      "fill": {"value": "#fff"},
      "stroke": {"value": "#fff"},
      "strokeWidth": {"value": 0},
       "angle": {"field": "labelAngle"},
      "align": {"value": "center"},
      "baseline": {
        "signal": "datum['type'] === 'straight' ? 'top' : 'bottom'"
      },
     "opacity": {
  "signal": "isValid(hoverFocus) && datum['label'] === hoverFocus['label'] ? 1 : labelsOnHover ? 0 : 1"
}
    }
  }
}
,
       {
  "name": "milestone_labels",
  "description": "The milestone labels",
  "from": {"data": "milestones"},
  "type": "text",
  "interactive": true,
  "encode": {
    "update": {
      "x": {"field": "x"},
      "y": {"field": "y"},
      "dy": {"field": "dy"},
      "text": {"signal": "datum['domain'] + ' - ' + datum['label']"},
      "lineBreak": {"value": ", "},
      "fontSize": {"value": 10},
    }
  }
}
    ],
    "data": [
      {
        "name": "dataset",
        "values": [
  {
    "domain": 1839,
    "label": "Alocasia cucullata, Alocasia macrorrhizos"
  },
  {
    "domain": 1846,
    "label": "Alocasia indica, Alocasia odora"
  },
  {
    "domain": 1852,
    "label": "Alocasia alba"
  },
  {
    "domain": 1854,
    "label": "Alocasia fornicata"
  },
  {
    "domain": 1855,
    "label": "Alocasia navicularis"
  },
  {
    "domain": 1856,
    "label": "Alocasia longiloba, Alocasia puber"
  },
  {
    "domain": 1859,
    "label": "Alocasia acuminata, Alocasia decipiens, Alocasia fallax"
  },
  {
    "domain": 1861,
    "label": "Alocasia cuprea"
  },
  {
    "domain": 1862,
    "label": "Alocasia portei, Alocasia zebrina"
  },
  {
    "domain": 1879,
    "label": "Alocasia beccarii, Alocasia scabriuscula"
  },
  {
    "domain": 1884,
    "label": "Alocasia reginae, Alocasia sanderiana"
  },
  {
    "domain": 1885,
    "label": "Alocasia sinuata"
  },
  {
    "domain": 1887,
    "label": "Alocasia perakensis"
  },
  {
    "domain": 1888,
    "label": "Alocasia princeps"
  },
  {
    "domain": 1890,
    "label": "Alocasia reversa"
  },
  {
    "domain": 1895,
    "label": "Alocasia aequiloba"
  },
  {
    "domain": 1898,
    "label": "Alocasia celebica, Alocasia hollrungii"
  },
  {
    "domain": 1901,
    "label": "Alocasia arifolia"
  },
  {
    "domain": 1903,
    "label": "Alocasia hainanica"
  },
  {
    "domain": 1905,
    "label": "Alocasia culionensis"
  },
  {
    "domain": 1908,
    "label": "Alocasia heterophylla"
  },
  {
    "domain": 1912,
    "label": "Alocasia devansayana, Alocasia lancifolia, Alocasia micholitziana"
  },
  {
    "domain": 1915,
    "label": "Alocasia brisbanensis, Alocasia inornata"
  },
  {
    "domain": 1916,
    "label": "Alocasia wentii"
  },
  {
    "domain": 1918,
    "label": "Alocasia maquilingensis"
  },
  {
    "domain": 1920,
    "label": "Alocasia atropurpurea, Alocasia grata, Alocasia lecomtei"
  },
  {
    "domain": 1939,
    "label": "Alocasia cadieri, Alocasia decumbens"
  },
  {
    "domain": 1965,
    "label": "Alocasia okinawensis"
  },
  {
    "domain": 1967,
    "label": "Alocasia peltata, Alocasia robusta, Alocasia sarawakensis"
  },
  {
    "domain": 1990,
    "label": "Alocasia brancifolia, Alocasia lauterbachiana"
  },
  {
    "domain": 1991,
    "label": "Alocasia boa, Alocasia flabellifera, Alocasia monticola, Alocasia nicolsonii, Alocasia pyrospatha"
  },
  {
    "domain": 1994,
    "label": "Alocasia simonsiana"
  },
  {
    "domain": 1997,
    "label": "Alocasia melo"
  },
  {
    "domain": 1998,
    "label": "Alocasia balgooyi, Alocasia flemingiana, Alocasia kerinciensis, Alocasia minuscula, Alocasia pangeran, Alocasia principiculus, Alocasia puteri, Alocasia reginula, Alocasia ridleyi, Alocasia suhirmaniana, Alocasia venusta, Alocasia wongii"
  },
  {
    "domain": 1999,
    "label": "Alocasia boyceana, Alocasia clypeolata, Alocasia ramosii, Alocasia scalprum"
  },
  {
    "domain": 2000,
    "label": "Alocasia nebula"
  },
  {
    "domain": 2003,
    "label": "Alocasia megawatiae"
  },
  {
    "domain": 2007,
    "label": "Alocasia chaii, Alocasia infernalis, Alocasia nycteris"
  },
  {
    "domain": 2008,
    "label": "Alocasia hypoleuca"
  },
  {
    "domain": 2010,
    "label": "Alocasia jiewhoei"
  },
  {
    "domain": 2011,
    "label": "Alocasia baginda"
  },
  {
    "domain": 2013,
    "label": "Alocasia evrardii, Alocasia vietnamensis"
  },
  {
    "domain": 2016,
    "label": "Alocasia azlanii"
  },
  {
    "domain": 2017,
    "label": "Alocasia farisii, Alocasia rivularis"
  },
  {
    "domain": 2018,
    "label": "Alocasia hararganjensis, Alocasia salarkhanii"
  },
  {
    "domain": 2020,
    "label": "Alocasia lihengiae, Alocasia puncakborneensis, Alocasia yunqiana"
  },
  {
    "domain": 2022,
    "label": "Alocasia epilithica"
  },
  {
    "domain": 2023,
    "label": "Alocasia tandurusa"
  },
  {
    "domain": 2024,
    "label": "Alocasia roseus, Alocasia sakonakhonensis"
  }
]

      },
      {
        "name": "serpentineDomain",
        "values": [{}],
        "transform": [
          {
            "type": "formula",
            "expr": "sequence(sDomain[0],sDomain[1], 0.1 )",
            "as": "domain"
          },
          {"type": "flatten", "fields": ["domain"]}
        ]
      },
      {
        "name": "milestoneDomain",
        "source": "dataset",
        "transform": [{"type": "project", "fields": ["domain"]}]
      },
      {
        "name": "tickDomain",
        "values": [{}],
        "transform": [
          {"type": "formula", "expr": "sequence(1,tC+1, 1)", "as": "id"},
          {"type": "flatten", "fields": ["id"]},
          {
            "type": "formula",
            "expr": "datum['id'] === 1 ? sDomain[0] : datum['id'] === tC ? sDomain[1] : null",
            "as": "domain"
          },
          {
            "type": "formula",
            "expr": "round(isValid(datum['domain']) ? datum['domain'] : (sDomain[0] + (sDomain[1]-sDomain[0])*((datum['id']-1)/(tC-1))))",
            "as": "domain"
          },
          {"type": "project", "fields": ["domain"]}
        ]
      },
      {
        "name": "componentEncodings",
        "values": [
          {"category": "start"},
          {"category": "serpentine"},
          {"category": "milestone"},
          {"category": "tick"},
          {"category": "end"}
        ],
        "transform": [
          {"type": "formula", "expr": "now()", "as": "timestamp"},
          {
            "type": "formula",
            "expr": "datum['category'] === 'start' ? [sDomain[reverse ? 1 : 0]] : datum['category'] === 'serpentine' ? pluck(data('serpentineDomain'), 'domain') : datum['category'] === 'milestone' ? pluck(data('dataset'), 'domain') : datum['category']==='tick' ? pluck(data('tickDomain'), 'domain') : datum['category'] === 'end' ? [sDomain[reverse ? 0 : 1]] : null",
            "as": "domain"
          },
          {"type": "flatten", "fields": ["domain"]},
          {"type": "formula", "expr": "+datum['domain']", "as": "domain"},
          {
            "type": "window",
            "ops": ["row_number"],
            "sort": {"field": "domain"},
            "groupby": ["category"],
            "as": ["id"]
          },
          {
            "type": "formula",
            "expr": "scale('sS1', datum['domain'])",
            "as": "sK"
          },
          {
            "type": "formula",
            "expr": "floor(datum['sK'] / (sW + sH*PI/2))",
            "as": "i"
          },
          {"type": "formula", "expr": "datum['sK'] % (sW + sH*PI/2)", "as": "r"},
          {"type": "formula", "expr": "(datum['r'] - sW)/(sH/2)", "as": "alpha"},
          {
            "type": "formula",
            "expr": "(((datum['i']+1)*sWsA)-sA) >= datum['sK'] ? 'straight' : 'arc'",
            "as": "type"
          },
          {
            "type": "formula",
            "expr": "(datum['i']%2 == 0) ? min(datum['r'],sW) : max(sW-datum['r'], 0)",
            "as": "xStraight"
          },
          {
            "type": "formula",
            "expr": "datum['type'] === 'straight' ? datum['xStraight'] : datum['xStraight'] + (datum['i']%2 == 0 ? sin(datum['alpha'])*sH/2 : -sin(datum['alpha'])*sH/2)",
            "as": "x"
          },
          {
            "type": "formula",
            "expr": "datum['type'] === 'straight' ? datum['i']*sH : (datum['i']*sH) + (1 - cos(datum['alpha']))*sH/2",
            "as": "y"
          },
          {
            "type": "formula",
            "expr": "datum['type'] === 'straight' ? null : datum['i']%2===0?'right':'left'",
            "as": "side"
          },
          {
            "type": "formula",
            "expr": "datum['type'] === 'straight' ? null : datum['alpha']<PI/2?'top':'bottom'",
            "as": "hemisphere"
          },
          {
            "type": "formula",
            "expr": "datum['type'] === 'straight' ? 0 : (datum['side'] === 'left' ? -1 : 1) *datum['alpha']*(180/PI)+(datum['alpha'] < PI/2 ? 0 : 180)",
            "as": "labelAngle"
          },
          {
            "type": "formula",
            "expr": "datum['i']%2===0 ?'→':'←'",
            "as": "direction"
          },
          {
            "type": "formula",
            "expr": "datum['type'] === 'straight' ? datum['direction'] : datum['side'] === 'left' ? datum['hemisphere'] === 'top'? '←' : '→' :  datum['hemisphere'] === 'top'? '→' : '←'",
            "as": "direction"
          }
        ]
      },
      {
        "name": "serpentine",
        "source": "componentEncodings",
        "transform": [
          {"type": "filter", "expr": "datum['category'] === 'serpentine'"}
        ]
      },
      {
        "name": "ticks",
        "source": "componentEncodings",
        "transform": [
          {"type": "filter", "expr": "datum['category'] === 'tick'"},
          {
            "type": "formula",
            "expr": "!isValid(datum['side']) ? (tLO+3.5) : datum['side'] === 'right' ? (round(datum['alpha']*(180/PI)) >= 90 ? -1 : 1.75) * (tLO+3.5) : (round(datum['alpha']*(180/PI)) > 89 ? -1 : 1.75) * (tLO+3.5)",
            "as": "dy"
          }
        ]
      },
      {
        "name": "domain_extent",
        "source": "componentEncodings",
        "transform": [
          {
            "type": "filter",
            "expr": "datum['category'] === 'start' || datum['category'] === 'end'"
          },
          {
            "type": "formula",
            "expr": "datum['category'] === 'start' ? 'right' : datum['direction'] === '←' && datum['type'] === 'straight' ? 'right' : datum['side'] === 'left' ? 'right' : 'left'",
            "as": "align"
          },
          {
            "type": "formula",
            "expr": "datum['category'] === 'start' ? -tLO-5 :  datum['direction'] === '←'  && datum['type'] === 'straight' ? -tLO-5 : datum['side'] === 'left' ? -tLO-5 : tLO+5",
            "as": "dx"
          }
        ]
      },
      {
        "name": "segment_ends",
        "source": "componentEncodings",
        "transform": [
          {
            "type": "filter",
            "expr": "includeArrows && datum['category'] === 'serpentine'"
          },
          {
            "type": "joinaggregate",
            "fields": ["id", "id"],
            "ops": ["min", "max"],
            "groupby": ["i"],
            "as": ["minId", "maxId"]
          },
          {
            "type": "filter",
            "expr": "datum['id'] === (reverse ? datum['maxId'] : datum['minId'])"
          }
        ]
      },
      {
        "name": "footer",
        "values": [
          {
            "id": 1,
            "text": [
              "Data Source:",
              "https://ourworldindata.org/mass-extinctions"
            ],
            "href": "https://ourworldindata.org/mass-extinctions"
          },
          {
            "id": 2,
            "text": ["Icons:", "https://fontawesome.com/"],
            "href": "https://fontawesome.com/"
          },
          {
            "id": 3,
            "text": ["Data Viz By:", "Madison Giammaria"],
            "href": "https://www.linkedin.com/in/madison-giammaria-58463b33"
          }
        ]
      },
      {
  "name": "milestones",
  "source": "componentEncodings",
  "transform": [
    {"type": "filter", "expr": "datum['category'] === 'milestone'"},
    {
      "type": "lookup",
      "key": "domain",
      "from": "dataset",
      "fields": ["domain"],
      "values": ["label", "color"]
    },
    {
      "type": "formula",
      "expr": "!isValid(datum['side']) ? -(mO) : datum['side'] === 'right' ? (round(datum['alpha']*(180/PI)) >= 90 ? 1 : -0.5) * (mO+3.5) : (round(datum['alpha']*(180/PI)) > 89 ? 1 : -0.5) * (mO+3.5)",
      "as": "dy"
    },
    {
      "type": "formula",
      "expr": "(isValid(hoverFocus) && hoverFocus['domain']===datum['domain']) ? 1 : 0.4",
      "as": "fillOpacity"
    },
    {
      "type": "formula",
      "expr": "length(split(datum['label'], ','))",
      "as": "eventCount"
    },
      {
      "type": "window",
      "ops": ["row_number"],
      "sort": {"field": "domain"},
      "as": ["id"]
    },
    {
        "type": "formula",
        "expr": "10 + 100 * datum['eventCount']",
        "as": "size"
    },
    {
      "type": "collect",
      "sort": {
        "field": "size",
        "order": "descending"
      }
    }
  ]
}

      
    ]
  }
